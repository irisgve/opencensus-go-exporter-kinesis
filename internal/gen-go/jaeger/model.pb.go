// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model.proto

/*
Package model is a generated protocol buffer package.

It is generated from these files:
	model.proto

It has these top-level messages:
	KeyValue
	Log
	SpanRef
	Process
	Span
	Trace
	Batch
	PostSpansRequest
	PostSpansResponse
	GetTraceRequest
	GetTraceResponse
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/duration"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ValueType int32

const (
	ValueType_STRING  ValueType = 0
	ValueType_BOOL    ValueType = 1
	ValueType_INT64   ValueType = 2
	ValueType_FLOAT64 ValueType = 3
	ValueType_BINARY  ValueType = 4
)

var ValueType_name = map[int32]string{
	0: "STRING",
	1: "BOOL",
	2: "INT64",
	3: "FLOAT64",
	4: "BINARY",
}
var ValueType_value = map[string]int32{
	"STRING":  0,
	"BOOL":    1,
	"INT64":   2,
	"FLOAT64": 3,
	"BINARY":  4,
}

func (x ValueType) String() string {
	return proto.EnumName(ValueType_name, int32(x))
}
func (ValueType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SpanRefType int32

const (
	SpanRefType_CHILD_OF     SpanRefType = 0
	SpanRefType_FOLLOWS_FROM SpanRefType = 1
)

var SpanRefType_name = map[int32]string{
	0: "CHILD_OF",
	1: "FOLLOWS_FROM",
}
var SpanRefType_value = map[string]int32{
	"CHILD_OF":     0,
	"FOLLOWS_FROM": 1,
}

func (x SpanRefType) String() string {
	return proto.EnumName(SpanRefType_name, int32(x))
}
func (SpanRefType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type KeyValue struct {
	Key      string    `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	VType    ValueType `protobuf:"varint,2,opt,name=v_type,json=vType,enum=jaeger.model.ValueType" json:"v_type,omitempty"`
	VStr     string    `protobuf:"bytes,3,opt,name=v_str,json=vStr" json:"v_str,omitempty"`
	VBool    bool      `protobuf:"varint,4,opt,name=v_bool,json=vBool" json:"v_bool,omitempty"`
	VInt64   int64     `protobuf:"varint,5,opt,name=v_int64,json=vInt64" json:"v_int64,omitempty"`
	VFloat64 float64   `protobuf:"fixed64,6,opt,name=v_float64,json=vFloat64" json:"v_float64,omitempty"`
	VBinary  []byte    `protobuf:"bytes,7,opt,name=v_binary,json=vBinary,proto3" json:"v_binary,omitempty"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *KeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValue) GetVType() ValueType {
	if m != nil {
		return m.VType
	}
	return ValueType_STRING
}

func (m *KeyValue) GetVStr() string {
	if m != nil {
		return m.VStr
	}
	return ""
}

func (m *KeyValue) GetVBool() bool {
	if m != nil {
		return m.VBool
	}
	return false
}

func (m *KeyValue) GetVInt64() int64 {
	if m != nil {
		return m.VInt64
	}
	return 0
}

func (m *KeyValue) GetVFloat64() float64 {
	if m != nil {
		return m.VFloat64
	}
	return 0
}

func (m *KeyValue) GetVBinary() []byte {
	if m != nil {
		return m.VBinary
	}
	return nil
}

type Log struct {
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Fields    []*KeyValue                `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Log) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Log) GetFields() []*KeyValue {
	if m != nil {
		return m.Fields
	}
	return nil
}

type SpanRef struct {
	TraceId []byte      `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId  []byte      `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	RefType SpanRefType `protobuf:"varint,3,opt,name=ref_type,json=refType,enum=jaeger.model.SpanRefType" json:"ref_type,omitempty"`
}

func (m *SpanRef) Reset()                    { *m = SpanRef{} }
func (m *SpanRef) String() string            { return proto.CompactTextString(m) }
func (*SpanRef) ProtoMessage()               {}
func (*SpanRef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SpanRef) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *SpanRef) GetSpanId() []byte {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *SpanRef) GetRefType() SpanRefType {
	if m != nil {
		return m.RefType
	}
	return SpanRefType_CHILD_OF
}

type Process struct {
	ServiceName string      `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	Tags        []*KeyValue `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *Process) Reset()                    { *m = Process{} }
func (m *Process) String() string            { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()               {}
func (*Process) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Process) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Process) GetTags() []*KeyValue {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Span struct {
	TraceId       []byte                     `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId        []byte                     `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	OperationName string                     `protobuf:"bytes,3,opt,name=operation_name,json=operationName" json:"operation_name,omitempty"`
	References    []*SpanRef                 `protobuf:"bytes,4,rep,name=references" json:"references,omitempty"`
	Flags         uint32                     `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	StartTime     *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Duration      *google_protobuf1.Duration `protobuf:"bytes,7,opt,name=duration" json:"duration,omitempty"`
	Tags          []*KeyValue                `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
	Logs          []*Log                     `protobuf:"bytes,9,rep,name=logs" json:"logs,omitempty"`
	Process       *Process                   `protobuf:"bytes,10,opt,name=process" json:"process,omitempty"`
	ProcessId     string                     `protobuf:"bytes,11,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	Warnings      []string                   `protobuf:"bytes,12,rep,name=warnings" json:"warnings,omitempty"`
}

func (m *Span) Reset()                    { *m = Span{} }
func (m *Span) String() string            { return proto.CompactTextString(m) }
func (*Span) ProtoMessage()               {}
func (*Span) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Span) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *Span) GetSpanId() []byte {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *Span) GetOperationName() string {
	if m != nil {
		return m.OperationName
	}
	return ""
}

func (m *Span) GetReferences() []*SpanRef {
	if m != nil {
		return m.References
	}
	return nil
}

func (m *Span) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Span) GetStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Span) GetDuration() *google_protobuf1.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Span) GetTags() []*KeyValue {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Span) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *Span) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *Span) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *Span) GetWarnings() []string {
	if m != nil {
		return m.Warnings
	}
	return nil
}

type Trace struct {
	Spans      []*Span                 `protobuf:"bytes,1,rep,name=spans" json:"spans,omitempty"`
	ProcessMap []*Trace_ProcessMapping `protobuf:"bytes,2,rep,name=process_map,json=processMap" json:"process_map,omitempty"`
	Warnings   []string                `protobuf:"bytes,3,rep,name=warnings" json:"warnings,omitempty"`
}

func (m *Trace) Reset()                    { *m = Trace{} }
func (m *Trace) String() string            { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()               {}
func (*Trace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Trace) GetSpans() []*Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

func (m *Trace) GetProcessMap() []*Trace_ProcessMapping {
	if m != nil {
		return m.ProcessMap
	}
	return nil
}

func (m *Trace) GetWarnings() []string {
	if m != nil {
		return m.Warnings
	}
	return nil
}

type Trace_ProcessMapping struct {
	ProcessId string   `protobuf:"bytes,1,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	Process   *Process `protobuf:"bytes,2,opt,name=process" json:"process,omitempty"`
}

func (m *Trace_ProcessMapping) Reset()                    { *m = Trace_ProcessMapping{} }
func (m *Trace_ProcessMapping) String() string            { return proto.CompactTextString(m) }
func (*Trace_ProcessMapping) ProtoMessage()               {}
func (*Trace_ProcessMapping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

func (m *Trace_ProcessMapping) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *Trace_ProcessMapping) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

type Batch struct {
	Spans   []*Span  `protobuf:"bytes,1,rep,name=spans" json:"spans,omitempty"`
	Process *Process `protobuf:"bytes,2,opt,name=process" json:"process,omitempty"`
}

func (m *Batch) Reset()                    { *m = Batch{} }
func (m *Batch) String() string            { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()               {}
func (*Batch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Batch) GetSpans() []*Span {
	if m != nil {
		return m.Spans
	}
	return nil
}

func (m *Batch) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

type PostSpansRequest struct {
	Batch *Batch `protobuf:"bytes,1,opt,name=batch" json:"batch,omitempty"`
}

func (m *PostSpansRequest) Reset()                    { *m = PostSpansRequest{} }
func (m *PostSpansRequest) String() string            { return proto.CompactTextString(m) }
func (*PostSpansRequest) ProtoMessage()               {}
func (*PostSpansRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PostSpansRequest) GetBatch() *Batch {
	if m != nil {
		return m.Batch
	}
	return nil
}

type PostSpansResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *PostSpansResponse) Reset()                    { *m = PostSpansResponse{} }
func (m *PostSpansResponse) String() string            { return proto.CompactTextString(m) }
func (*PostSpansResponse) ProtoMessage()               {}
func (*PostSpansResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PostSpansResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type GetTraceRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetTraceRequest) Reset()                    { *m = GetTraceRequest{} }
func (m *GetTraceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTraceRequest) ProtoMessage()               {}
func (*GetTraceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetTraceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetTraceResponse struct {
	Trace *Trace `protobuf:"bytes,1,opt,name=trace" json:"trace,omitempty"`
}

func (m *GetTraceResponse) Reset()                    { *m = GetTraceResponse{} }
func (m *GetTraceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTraceResponse) ProtoMessage()               {}
func (*GetTraceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetTraceResponse) GetTrace() *Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

func init() {
	proto.RegisterType((*KeyValue)(nil), "jaeger.model.KeyValue")
	proto.RegisterType((*Log)(nil), "jaeger.model.Log")
	proto.RegisterType((*SpanRef)(nil), "jaeger.model.SpanRef")
	proto.RegisterType((*Process)(nil), "jaeger.model.Process")
	proto.RegisterType((*Span)(nil), "jaeger.model.Span")
	proto.RegisterType((*Trace)(nil), "jaeger.model.Trace")
	proto.RegisterType((*Trace_ProcessMapping)(nil), "jaeger.model.Trace.ProcessMapping")
	proto.RegisterType((*Batch)(nil), "jaeger.model.Batch")
	proto.RegisterType((*PostSpansRequest)(nil), "jaeger.model.PostSpansRequest")
	proto.RegisterType((*PostSpansResponse)(nil), "jaeger.model.PostSpansResponse")
	proto.RegisterType((*GetTraceRequest)(nil), "jaeger.model.GetTraceRequest")
	proto.RegisterType((*GetTraceResponse)(nil), "jaeger.model.GetTraceResponse")
	proto.RegisterEnum("jaeger.model.ValueType", ValueType_name, ValueType_value)
	proto.RegisterEnum("jaeger.model.SpanRefType", SpanRefType_name, SpanRefType_value)
}

func init() { proto.RegisterFile("model.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1100 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x41, 0x6f, 0xe3, 0xc4,
	0x17, 0xdf, 0x49, 0xe2, 0xd8, 0x79, 0x49, 0xf3, 0xcf, 0xce, 0xaa, 0xff, 0x75, 0xb3, 0x90, 0x64,
	0xbd, 0x42, 0xca, 0x16, 0x36, 0x81, 0xd0, 0x5d, 0x89, 0x45, 0x08, 0xad, 0x5b, 0xb2, 0x58, 0xa4,
	0xcd, 0x32, 0xad, 0x16, 0xc1, 0x81, 0xc8, 0x49, 0x26, 0xae, 0xa9, 0xe3, 0x31, 0xb6, 0x63, 0x88,
	0x00, 0x21, 0xf1, 0x05, 0x40, 0xe2, 0xc2, 0x11, 0x8e, 0x7c, 0x0b, 0x8e, 0x7b, 0x44, 0xda, 0x13,
	0x1c, 0x0a, 0x2a, 0x1c, 0xf6, 0x63, 0xa0, 0x19, 0xdb, 0x69, 0x13, 0xba, 0x50, 0x38, 0x70, 0xea,
	0xbc, 0x79, 0xbf, 0xf7, 0xde, 0xef, 0xfd, 0xde, 0xeb, 0xc4, 0x50, 0x9c, 0xb2, 0x31, 0x75, 0x5a,
	0x9e, 0xcf, 0x42, 0x86, 0x4b, 0x1f, 0x98, 0xd4, 0xa2, 0x7e, 0x4b, 0xdc, 0x55, 0xeb, 0x16, 0x63,
	0x96, 0x43, 0xdb, 0xc2, 0x37, 0x9c, 0x4d, 0xda, 0xa1, 0x3d, 0xa5, 0x41, 0x68, 0x4e, 0xbd, 0x18,
	0x5e, 0xad, 0xad, 0x02, 0xc6, 0x33, 0xdf, 0x0c, 0x6d, 0xe6, 0x26, 0xfe, 0x67, 0x12, 0xbf, 0xe9,
	0xd9, 0x6d, 0xd3, 0x75, 0x59, 0x28, 0x9c, 0x41, 0xe2, 0xbd, 0x65, 0xd9, 0xe1, 0xe1, 0x6c, 0xd8,
	0x1a, 0xb1, 0x69, 0xdb, 0x62, 0x16, 0x3b, 0x4d, 0xc3, 0x2d, 0x61, 0x88, 0x53, 0x0c, 0xd7, 0x1e,
	0x23, 0x50, 0xde, 0xa2, 0xf3, 0x87, 0xa6, 0x33, 0xa3, 0xb8, 0x02, 0xd9, 0x23, 0x3a, 0x57, 0x51,
	0x03, 0x35, 0x0b, 0x84, 0x1f, 0x71, 0x0b, 0xf2, 0xd1, 0x20, 0x9c, 0x7b, 0x54, 0xcd, 0x34, 0x50,
	0xb3, 0xdc, 0xb9, 0xda, 0x3a, 0xdb, 0x4b, 0x4b, 0x84, 0x1d, 0xcc, 0x3d, 0x4a, 0xa4, 0x88, 0xff,
	0xc1, 0x57, 0x40, 0x8a, 0x06, 0x41, 0xe8, 0xab, 0x59, 0x91, 0x23, 0x17, 0xed, 0x87, 0x3e, 0x5e,
	0xe7, 0x49, 0x86, 0x8c, 0x39, 0x6a, 0xae, 0x81, 0x9a, 0x0a, 0x91, 0x22, 0x9d, 0x31, 0x07, 0x5f,
	0x05, 0x39, 0x1a, 0xd8, 0x6e, 0x78, 0x67, 0x4b, 0x95, 0x1a, 0xa8, 0x99, 0x25, 0xf9, 0xc8, 0xe0,
	0x16, 0xbe, 0x06, 0x85, 0x68, 0x30, 0x71, 0x98, 0xc9, 0x5d, 0xf9, 0x06, 0x6a, 0x22, 0xa2, 0x44,
	0xdd, 0xd8, 0xc6, 0x1b, 0xa0, 0x44, 0x83, 0xa1, 0xed, 0x9a, 0xfe, 0x5c, 0x95, 0x1b, 0xa8, 0x59,
	0x22, 0x72, 0xa4, 0x0b, 0xf3, 0xae, 0xf2, 0xe4, 0xdb, 0x3a, 0x7a, 0xf2, 0x5d, 0x1d, 0x69, 0x9f,
	0x43, 0xb6, 0xc7, 0x2c, 0xac, 0x43, 0x61, 0x21, 0xae, 0xe8, 0xaa, 0xd8, 0xa9, 0xb6, 0x62, 0xf5,
	0x5a, 0xa9, 0x2c, 0xad, 0x83, 0x14, 0xa1, 0x2b, 0x8f, 0x8e, 0xeb, 0x97, 0xbe, 0xfa, 0xa5, 0x8e,
	0xc8, 0x69, 0x18, 0xde, 0x82, 0xfc, 0xc4, 0xa6, 0xce, 0x38, 0x50, 0x33, 0x8d, 0x6c, 0xb3, 0xd8,
	0xf9, 0xff, 0xb2, 0x02, 0xa9, 0x76, 0x7a, 0x8e, 0x07, 0x93, 0x04, 0xab, 0x7d, 0x8f, 0x40, 0xde,
	0xf7, 0x4c, 0x97, 0xd0, 0x09, 0xbe, 0x0d, 0x4a, 0xe8, 0x9b, 0x23, 0x3a, 0xb0, 0xc7, 0x82, 0x44,
	0x49, 0xaf, 0x72, 0xec, 0xcf, 0xc7, 0x75, 0xf9, 0x80, 0xdf, 0x1b, 0x3b, 0x27, 0xa7, 0x47, 0x22,
	0x0b, 0xac, 0x31, 0xc6, 0x2f, 0x81, 0x1c, 0x78, 0xa6, 0xcb, 0xa3, 0x32, 0x22, 0x4a, 0x4d, 0xa2,
	0xf2, 0x3c, 0xb1, 0x08, 0x4a, 0x4e, 0x24, 0xcf, 0x81, 0xc6, 0x18, 0x6f, 0x81, 0xe2, 0xd3, 0x49,
	0x3c, 0xaf, 0xac, 0x98, 0xd7, 0xc6, 0x32, 0xdb, 0x84, 0x92, 0x98, 0x98, 0xec, 0xc7, 0x07, 0xed,
	0x7d, 0x90, 0x1f, 0xf8, 0x6c, 0x44, 0x83, 0x00, 0x5f, 0x87, 0x52, 0x40, 0xfd, 0xc8, 0x1e, 0xd1,
	0x81, 0x6b, 0x4e, 0x69, 0xb2, 0x09, 0xc5, 0xe4, 0x6e, 0xcf, 0x9c, 0x52, 0xfc, 0x22, 0xe4, 0x42,
	0xd3, 0xba, 0x98, 0x1a, 0x02, 0xa9, 0xfd, 0x94, 0x83, 0x1c, 0x2f, 0xfc, 0x1f, 0x0a, 0xf1, 0x1c,
	0x94, 0x99, 0x47, 0xe3, 0xff, 0x9a, 0xb8, 0x93, 0x78, 0x1f, 0xd7, 0x16, 0xb7, 0xa2, 0x97, 0x57,
	0x01, 0x7c, 0x3a, 0xa1, 0x3e, 0x75, 0x47, 0x34, 0x50, 0x73, 0xa2, 0xa3, 0xf5, 0x73, 0x15, 0x4b,
	0x1a, 0x3a, 0x03, 0xc7, 0x37, 0x40, 0x9a, 0x38, 0x5c, 0x09, 0xbe, 0xbc, 0x6b, 0xfa, 0x5a, 0x42,
	0x4a, 0xea, 0xf2, 0x4b, 0x12, 0xfb, 0xf0, 0x36, 0x40, 0x10, 0x9a, 0x7e, 0x38, 0xe0, 0x0b, 0x25,
	0x76, 0xf9, 0xc2, 0x2b, 0x28, 0xe2, 0xb8, 0x07, 0xbf, 0x0e, 0x4a, 0xfa, 0x04, 0x88, 0x95, 0x2f,
	0x76, 0x36, 0xfe, 0x94, 0x62, 0x27, 0x01, 0xc4, 0x19, 0xbe, 0xe1, 0x19, 0x16, 0x41, 0x8b, 0x99,
	0x29, 0x17, 0x9d, 0x19, 0x7e, 0x1e, 0x72, 0x0e, 0xb3, 0x02, 0xb5, 0x20, 0x22, 0x2e, 0x2f, 0x47,
	0xf4, 0x98, 0x95, 0x82, 0x39, 0x08, 0xb7, 0x41, 0xf6, 0xe2, 0x05, 0x52, 0x41, 0xd0, 0x5b, 0xd1,
	0x30, 0xd9, 0x2e, 0x92, 0xa2, 0xf0, 0x0b, 0x00, 0xc9, 0x91, 0x0f, 0xb5, 0xc8, 0x47, 0xa3, 0xaf,
	0x9d, 0x1c, 0xd7, 0x0b, 0x09, 0xd2, 0xd8, 0x21, 0x85, 0x04, 0x60, 0x8c, 0x71, 0x15, 0x94, 0x8f,
	0x4c, 0xdf, 0xb5, 0x5d, 0x2b, 0x50, 0x4b, 0x8d, 0x6c, 0xb3, 0x40, 0x16, 0xb6, 0xf6, 0x65, 0x06,
	0x24, 0xb1, 0x30, 0xb8, 0x09, 0x12, 0x1f, 0x7e, 0xa0, 0x22, 0x41, 0x19, 0x9f, 0x33, 0xc6, 0x18,
	0x80, 0x0d, 0x28, 0xa6, 0xd5, 0xa7, 0xa6, 0x97, 0x2c, 0xb2, 0xb6, 0x8c, 0x17, 0x39, 0x53, 0xe2,
	0xbb, 0xa6, 0xe7, 0xd9, 0x6e, 0xda, 0x73, 0x4a, 0x7d, 0xd7, 0xf4, 0x96, 0xa8, 0x65, 0x97, 0xa9,
	0x55, 0x67, 0x50, 0x5e, 0x8e, 0x5f, 0x69, 0x1b, 0xfd, 0x4d, 0xdb, 0xb7, 0x4f, 0x55, 0xcd, 0xfc,
	0x85, 0xaa, 0x09, 0xab, 0x14, 0xab, 0x1d, 0x82, 0xa4, 0x9b, 0xe1, 0xe8, 0xf0, 0x1f, 0x08, 0xf2,
	0x2f, 0x2b, 0xbd, 0x06, 0x95, 0x07, 0x2c, 0x08, 0x79, 0xa6, 0x80, 0xd0, 0x0f, 0x67, 0x34, 0x08,
	0xf1, 0x4d, 0x90, 0x86, 0xbc, 0x7a, 0xf2, 0xda, 0x5e, 0x59, 0x4e, 0x24, 0x88, 0x91, 0x18, 0xa1,
	0xdd, 0x80, 0xcb, 0x67, 0xc2, 0x03, 0x8f, 0xb9, 0x01, 0xc5, 0x65, 0xc8, 0xb0, 0x23, 0x11, 0xac,
	0x90, 0x0c, 0x3b, 0xd2, 0xae, 0xc3, 0xff, 0xee, 0xd3, 0x50, 0x4c, 0x23, 0x2d, 0x51, 0x86, 0x4c,
	0xaa, 0x1e, 0xc9, 0xd8, 0x63, 0x4e, 0xe3, 0x14, 0x92, 0xa4, 0xb9, 0x09, 0x92, 0x78, 0x3d, 0xce,
	0xa7, 0x11, 0x63, 0x63, 0xc4, 0xe6, 0x1b, 0x50, 0x58, 0xfc, 0x8a, 0x61, 0x80, 0xfc, 0xfe, 0x01,
	0x31, 0xf6, 0xee, 0x57, 0x2e, 0x61, 0x05, 0x72, 0x7a, 0xbf, 0xdf, 0xab, 0x20, 0x5c, 0x00, 0xc9,
	0xd8, 0x3b, 0xb8, 0xb3, 0x55, 0xc9, 0xe0, 0x22, 0xc8, 0xdd, 0x5e, 0xff, 0x1e, 0x37, 0xb2, 0x1c,
	0xad, 0x1b, 0x7b, 0xf7, 0xc8, 0xbb, 0x95, 0xdc, 0xe6, 0x2d, 0x28, 0x9e, 0x79, 0x5c, 0x71, 0x09,
	0x94, 0xed, 0x37, 0x8d, 0xde, 0xce, 0xa0, 0xdf, 0xad, 0x5c, 0xc2, 0x15, 0x28, 0x75, 0xfb, 0xbd,
	0x5e, 0xff, 0x9d, 0xfd, 0x41, 0x97, 0xf4, 0x77, 0x2b, 0xa8, 0xf3, 0x29, 0xe0, 0x6d, 0xe6, 0x38,
	0x74, 0x14, 0x32, 0x7f, 0x3f, 0x7e, 0x5d, 0x1f, 0x76, 0xf0, 0x04, 0x0a, 0x0b, 0x49, 0x70, 0x6d,
	0x65, 0x08, 0x2b, 0x52, 0x57, 0xeb, 0x4f, 0xf5, 0xc7, 0x22, 0x68, 0xea, 0x17, 0x8f, 0x7f, 0xff,
	0x3a, 0x83, 0xb5, 0x35, 0xf1, 0xa5, 0x10, 0x75, 0xda, 0x62, 0xda, 0x77, 0xd1, 0x66, 0xe7, 0x63,
	0x28, 0xbf, 0x3d, 0xa3, 0xfe, 0xfc, 0x6c, 0x65, 0x25, 0x15, 0x11, 0x3f, 0xbb, 0x9c, 0x78, 0x45,
	0xff, 0x6a, 0xed, 0x69, 0xee, 0xa4, 0xec, 0x35, 0x51, 0x76, 0x1d, 0x5f, 0x49, 0xcb, 0x0a, 0x9d,
	0x83, 0xf6, 0x27, 0xf6, 0xf8, 0x33, 0xfd, 0x95, 0x47, 0x27, 0x35, 0xf4, 0xe3, 0x49, 0x0d, 0xfd,
	0x7a, 0x52, 0x43, 0x3f, 0xfc, 0x56, 0x43, 0xd0, 0xb0, 0x59, 0x8b, 0x4d, 0x5d, 0x5b, 0x7c, 0xe0,
	0xc4, 0x29, 0x17, 0xa6, 0x78, 0xdd, 0xde, 0x93, 0xc4, 0xed, 0x30, 0x2f, 0xac, 0x97, 0xff, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x57, 0xe2, 0x65, 0xed, 0x5b, 0x09, 0x00, 0x00,
}
